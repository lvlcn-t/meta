name: Test Go

on:
  workflow_call:
    inputs:
      go_version:
        description: Go version to use
        type: string
        required: false
      go_version_file:
        description: Go version to use from go.mod
        type: string
        required: false
        default: go.mod
      golangci_config:
        description: Path to the golangci config file
        type: string
        required: false
      before_tests:
        description: Commands to run before tests
        type: string
        required: false
      additional_args:
        description: Additional parameters to pass to the test command
        type: string
        required: false
    secrets:
      private_go_server:
        description: Private Go server
        required: false
      private_go_server_token:
        description: Private Go server token
        required: false

jobs:
  test_go:
    name: Run go test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      # Unfortunately GitHub Actions doesn't support yaml anchors > https://github.com/actions/runner/issues/1182
      - name: Set up Go w/ go.mod version
        if: ${{ github.event.inputs.go_version }} == null
        uses: actions/setup-go@v5
        with:
          go-version-file: ${{ github.event.inputs.go_version_file }}

      - name: Set up Go w/ v${{ github.event.inputs.go_version }}
        if: ${{ github.event.inputs.go_version }} != null
        uses: actions/setup-go@v5
        with:
          go-version: ${{ github.event.inputs.go_version }}

      - name: Run tests
        env:
          PRIVATE_GO_SERVER: ${{ github.event.inputs.private_go_server }}
          PRIVATE_SERVER_USER: __token__
          PRIVATE_SERVER_TOKEN: ${{ github.event.inputs.private_go_server_token }}
        run: |
          ${{ github.event.inputs.before_tests }}
          echo "machine ${PRIVATE_GO_SERVER}" >> ~/.netrc
          echo "    login ${PRIVATE_SERVER_USER}" >> ~/.netrc
          echo "    password ${PRIVATE_SERVER_TOKEN}" >> ~/.netrc
          go mod download
          go install github.com/boumenot/gocover-cobertura@latest
          go install gotest.tools/gotestsum@latest
          gotestsum --junitfile report.xml --format standard-verbose -- -race -count=1 -covermode=atomic -coverprofile=cover.out.tmp -coverpkg=./... ${{ github.event.inputs.additional_args }} ./...
          cat cover.out.tmp | grep -vE '(_test.go|_moq.go|_templ.go)' | grep -vE 'test/|tests/|mocks/' > cover.out
          go tool cover -html=cover.out -o coverage.html
          gocover-cobertura < cover.out > coverage.xml
          go tool cover -func=cover.out | grep total | awk '{print "total-coverage "$3" of statements"}'

      - name: Upload coverage report
        uses: 5monkeys/cobertura-action@master
        with:
          path: coverage.xml
          minimum_coverage: 70

  sast_go:
    name: Run Gosec Security Scanner
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: "-fmt sarif -out report.sarif ./..."

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: report.sarif

  lint_go:
    name: Run golangci-lint
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.golangci_config }} != null
    steps:
      - uses: actions/checkout@v4
      - name: "Set up Go w/ go.mod version"
        if: ${{ github.event.inputs.go_version }} == null
        uses: actions/setup-go@v5
        with:
          go-version-file: ${{ github.event.inputs.go_version_file }}

      - name: Set up Go w/ v${{ github.event.inputs.go_version }}
        if: ${{ github.event.inputs.go_version }} != null
        uses: actions/setup-go@v5
        with:
          go-version: ${{ github.event.inputs.go_version }}

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          args: --issues-exit-code=1 --config ${{ github.event.inputs.golangci_config }}
